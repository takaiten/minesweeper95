{"version":3,"sources":["components/BombsCounter/index.tsx","components/TimeCounter/index.tsx","components/GameButton/index.tsx","helpers/field.ts","components/GameField/styled.tsx","components/GameField/index.tsx","components/Game/styled.tsx","components/Game/index.tsx","hooks/useTimer.ts","App.tsx","index.styles.ts","reportWebVitals.ts","index.tsx"],"names":["BombsCounter","bombs","value","minLength","React","memo","TimeCounter","passed","GameButton","onClick","square","size","role","aria-label","randInt","to","Math","floor","random","getNeighborCellBounds","field","position","depth","leftBound","max","x","rightBound","min","length","lowerBound","y","upperBound","getBombsAround","bombsAround","i","j","hasMine","leftClickOnCell","cell","isOpened","isQuestioned","hasFlag","colorsMap","0","1","2","3","4","5","6","7","8","GameFieldContainer","styled","div","FixedButton","Button","number","active","GameField","fieldRef","onGameOver","onFlagged","useState","setTrigger","target","dataset","current","Number","forEach","prev","onContextMenu","event","preventDefault","flagged","rightClickOnCell","map","indexX","indexY","data-x","data-y","sqaure","String","forwardRef","GameInfoRow","WindowContainer","Window","WindowPanel","Panel","GameInfoPanel","FieldPanel","Game","width","height","passedTime","setPassedTime","intervalHandle","setIntervalHandle","useEffect","handle","setInterval","time","clearInterval","stopTimer","useCallback","undefined","useTimer","bombsCount","setBombsCount","flaggedCount","setFlaggedCount","useRef","Array","fill","bombsLeft","createGameField","onGameButtonClick","handleGameOver","console","log","handleFlagged","flag","className","variant","ref","App","createGlobalStyle","ms_sans_serif","ms_sans_serif_bold","styleReset","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","theme","original","document","getElementById"],"mappings":"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","file":"static/js/main.6de98092.chunk.js","sourcesContent":["import React from 'react';\nimport { Counter } from 'react95';\n\ninterface BombsCounterProps {\n  bombs: number;\n}\n\nconst BombsCounter: React.FC<BombsCounterProps> = ({ bombs }) => {\n  return <Counter value={bombs} minLength={3} />;\n};\n\nexport default React.memo(BombsCounter);\n","import React from 'react';\nimport { Counter } from 'react95';\n\ninterface TimeCounterProps {\n  passed: number;\n}\n\nconst TimeCounter: React.FC<TimeCounterProps> = ({ passed }) => {\n  return <Counter value={passed} minLength={3} />;\n};\n\nexport default React.memo(TimeCounter);\n","import React from 'react';\nimport { Button } from 'react95';\n\ninterface GameButtonProps {\n  onClick: () => void;\n}\n\nconst GameButton: React.FC<GameButtonProps> = ({ onClick }) => {\n  return (\n    <Button square onClick={onClick} size=\"lg\">\n      <span role=\"img\" aria-label=\"game-button\">\n        😎\n      </span>\n    </Button>\n  );\n};\n\nexport default React.memo(GameButton);\n","import { FieldCell, FieldArray, FieldCellPosition } from '../models/GameModels';\n\nconst randInt = (to: number) => Math.floor(Math.random() * to);\nconst clamp = (x: number, a = 0, b = 1) => Math.min(Math.max(x, a), b);\nconst range = (n: number) => Array.from(Array(n).keys());\n\nexport const createFieldCell = (): FieldCell => ({\n  isOpened: false,\n  isQuestioned: false,\n  hasFlag: false,\n  hasMine: false,\n  bombsAround: 0,\n});\n\nconst getNeighborCellBounds = (field: FieldArray, position: FieldCellPosition, depth = 1) => {\n  const leftBound = Math.max(position.x - depth, 0);\n  const rightBound = Math.min(position.x + depth, field.length - 1);\n  const lowerBound = Math.max(position.y - depth, 0);\n  const upperBound = Math.min(position.y + depth, field[0].length - 1);\n\n  return [leftBound, rightBound, lowerBound, upperBound];\n};\n\nconst getBombsAround = (field: FieldArray, position: FieldCellPosition) => {\n  const [leftBound, rightBound, lowerBound, upperBound] = getNeighborCellBounds(field, position);\n\n  let bombsAround = 0;\n  for (let i = leftBound; i < rightBound + 1; i++) {\n    for (let j = lowerBound; j < upperBound + 1; j++) {\n      bombsAround += +field[i][j].hasMine;\n    }\n  }\n\n  return bombsAround;\n};\n\nexport const createGameField = (width: number, height: number, bombs: number): FieldArray => {\n  const field = Array(width)\n    .fill(null)\n    .map(() =>\n      Array(height)\n        .fill(null)\n        .map(() => createFieldCell()),\n    );\n\n  let bombsLeft = bombs;\n  while (bombsLeft) {\n    const x = randInt(width);\n    const y = randInt(height);\n    const cell = field[x][y];\n\n    if (cell.hasMine) continue;\n    cell.hasMine = true;\n    bombsLeft--;\n  }\n\n  for (let i = 0; i < width; i++) {\n    for (let j = 0; j < height; j++) {\n      if (field[i][j].hasMine) {\n        continue;\n      }\n      field[i][j].bombsAround = getBombsAround(field, { x: i, y: j });\n    }\n  }\n\n  return field;\n};\n\nexport const rightClickOnCell = (field: FieldArray, position: FieldCellPosition): number => {\n  const cell = field[position.x][position.y];\n  switch (true) {\n    case cell.isOpened:\n      return 0;\n    case cell.hasFlag:\n      cell.hasFlag = false;\n      cell.isQuestioned = true;\n      return -1;\n    case cell.isQuestioned:\n      cell.isQuestioned = false;\n      return 0;\n    default:\n      cell.hasFlag = true;\n      return 1;\n  }\n};\n\nexport const leftClickOnCell = (field: FieldArray, position: FieldCellPosition): boolean => {\n  const cell = field[position.x][position.y];\n  if (cell.hasMine) {\n    return true;\n  }\n  if (cell.isOpened || cell.isQuestioned || cell.hasFlag) {\n    return false;\n  }\n\n  cell.isOpened = true;\n\n  if (cell.bombsAround === 0) {\n    const [leftBound, rightBound, lowerBound, upperBound] = getNeighborCellBounds(field, position);\n\n    for (let i = leftBound; i < rightBound + 1; i++) {\n      for (let j = lowerBound; j < upperBound + 1; j++) {\n        leftClickOnCell(field, { x: i, y: j });\n      }\n    }\n  }\n  return false;\n};\n\nexport const revealField = (field: FieldArray): void => {\n  field.forEach((x) => {\n    x.forEach((y) => {\n      y.isOpened = true;\n      y.hasFlag = false;\n      y.isQuestioned = false;\n    });\n  });\n};\n\nexport const getIconByFieldCell = (cell: FieldCell): string => {\n  if (cell.isOpened && cell.hasMine) {\n    return '💣';\n  } else if (cell.hasFlag) {\n    return '🏁';\n  } else if (cell.isQuestioned) {\n    return '❓';\n  } else if (cell.isOpened && cell.bombsAround) {\n    return String(cell.bombsAround);\n  } else {\n    return '‏‏‎ ‎';\n  }\n};\n","import { Button } from 'react95';\nimport styled from 'styled-components';\n\nconst colorsMap: { [index: number]: string } = {\n  0: 'lightgrey',\n  1: 'blue',\n  2: 'green',\n  3: 'red',\n  4: 'purple',\n  5: 'maroon',\n  6: 'turquoise',\n  7: 'black',\n  8: 'grey',\n};\n\nexport const GameFieldContainer = styled.div`\n  padding: 0;\n`;\n\nexport const FixedButton = styled(Button)`\n  width: 36px;\n  height: 36px;\n  min-width: 36px;\n  min-height: 36px;\n  font-weight: bold;\n  font-size: 20px;\n  background-color: lightgrey;\n  color: ${({ number }: { number: number }) => colorsMap[number]};\n  &:before {\n    border: ${({ active }) => (active ? 'none' : null)};\n  }\n  & > * {\n    position: relative;\n  }\n  &:active:not(:disabled) {\n    padding-top: 0;\n    & > * {\n      top: 2px;\n    }\n  }\n`;\n","import React from 'react';\n\nimport {\n  getIconByFieldCell,\n  leftClickOnCell,\n  revealField,\n  rightClickOnCell,\n} from '../../helpers/field';\nimport { FieldArray } from '../../models/GameModels';\n\nimport { GameFieldContainer, FixedButton } from './styled';\n\ninterface GameFieldProps {\n  onGameOver: (trigger: React.Dispatch<React.SetStateAction<boolean>>) => void;\n  onFlagged: (flag: number) => void;\n}\n\nconst GameField: React.ForwardRefRenderFunction<FieldArray, GameFieldProps> = (\n  { onGameOver, onFlagged },\n  fieldRef: any,\n): any => {\n  const [_, setTrigger] = React.useState(false);\n\n  const handleClick = ({ target }: React.MouseEvent<HTMLDivElement>) => {\n    if (target) {\n      const { x, y } = (target as HTMLDivElement).dataset;\n      const wasBomb = leftClickOnCell(fieldRef.current, { x: Number(x), y: Number(y) });\n      if (wasBomb) {\n        revealField(fieldRef.current);\n        onGameOver(setTrigger);\n      }\n      setTrigger((prev) => !prev);\n    }\n  };\n\n  const handleRightClick = (event: React.MouseEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    if (event.target) {\n      const { x, y } = (event.target as HTMLDivElement).dataset;\n      if (x && y) {\n        const flagged = rightClickOnCell(fieldRef.current, { x: Number(x), y: Number(y) });\n        onFlagged(flagged);\n        setTrigger((prev) => !prev);\n      }\n    }\n  };\n\n  return (\n    <GameFieldContainer onClick={handleClick} onContextMenu={handleRightClick}>\n      {(fieldRef.current as FieldArray).map((x, indexX) => {\n        return (\n          <div key={indexX}>\n            {x.map((y, indexY) => (\n              <FixedButton\n                key={`${indexX}-${indexY}`}\n                data-x={indexX}\n                data-y={indexY}\n                sqaure\n                number={y.bombsAround}\n                active={y.isOpened}\n                size=\"md\"\n              >\n                <span>{getIconByFieldCell(y)}</span>\n              </FixedButton>\n            ))}\n          </div>\n        );\n      })}\n    </GameFieldContainer>\n  );\n};\n\nexport default React.memo(React.forwardRef(GameField));\n","import { Panel, Window } from 'react95';\nimport styled from 'styled-components';\n\nexport const GameInfoRow = styled.div`\n  display: flex;\n  flex-flow: row;\n  align-items: center;\n  justify-content: space-evenly;\n  & > * {\n    margin-right: 12px;\n  }\n`;\n\nexport const WindowContainer = styled(Window)`\n  min-width: max-content;\n  position: absolute;\n  top: 50%;\n  right: 50%;\n  transform: translate(50%, -50%);\n`;\n\nexport const WindowPanel = styled(Panel)`\n  display: grid;\n`;\n\nexport const GameInfoPanel = styled(Panel)`\n  padding: 8px;\n  margin: 8px;\n`;\n\nexport const FieldPanel = styled(Panel)`\n  margin: 8px;\n  margin-top: 0;\n`;\n","import React from 'react';\nimport { WindowHeader } from 'react95';\n\nimport BombsCounter from '../BombsCounter';\nimport TimeCounter from '../TimeCounter';\nimport GameButton from '../GameButton';\nimport GameField from '../GameField';\n\nimport { GameInfoRow, WindowPanel, GameInfoPanel, FieldPanel, WindowContainer } from './styled';\nimport { createGameField } from '../../helpers/field';\nimport { useTimer } from '../../hooks/useTimer';\n\ninterface GameProps {\n  width: number;\n  height: number;\n  bombs: number;\n}\n\nconst Game: React.FC<GameProps> = ({ width, height, bombs }) => {\n  const [passedTime, setPassedTime, stopTimer] = useTimer();\n  const [bombsCount, setBombsCount] = React.useState(bombs);\n  const [flaggedCount, setFlaggedCount] = React.useState(0);\n  const field = React.useRef(createGameField(width, height, bombs));\n\n  const onGameButtonClick = React.useCallback(() => {\n    // field.current = createGameField(width, height, bombs);\n    setPassedTime(0);\n    setBombsCount(bombs);\n  }, [setPassedTime, setBombsCount, bombs]);\n\n  const handleGameOver = React.useCallback(() => {\n    console.log('game over!');\n    stopTimer();\n  }, [stopTimer]);\n\n  const handleFlagged = React.useCallback(\n    (flag) => {\n      setFlaggedCount((prev) => prev + flag);\n    },\n    [setFlaggedCount],\n  );\n\n  return (\n    <WindowContainer>\n      <WindowHeader className=\"window-header\">\n        <span>minesweeper.exe</span>\n      </WindowHeader>\n      <WindowPanel variant=\"outside\">\n        <GameInfoPanel variant=\"well\">\n          <GameInfoRow>\n            <BombsCounter bombs={bombsCount - flaggedCount} />\n            <GameButton onClick={onGameButtonClick} />\n            <TimeCounter passed={passedTime} />\n          </GameInfoRow>\n        </GameInfoPanel>\n        <FieldPanel variant=\"well\">\n          <GameField ref={field} onGameOver={handleGameOver} onFlagged={handleFlagged} />\n        </FieldPanel>\n      </WindowPanel>\n    </WindowContainer>\n  );\n};\n\nexport default React.memo(Game);\n","import React from 'react';\n\ntype UseTimerResult = [number, React.Dispatch<React.SetStateAction<number>>, () => void];\n\nexport function useTimer(): UseTimerResult {\n  const [passedTime, setPassedTime] = React.useState(0);\n  const [intervalHandle, setIntervalHandle] = React.useState<number | undefined>();\n\n  React.useEffect(() => {\n    const handle = setInterval(() => {\n      setPassedTime((time) => time + 1);\n    }, 1000);\n    setIntervalHandle(handle);\n    return () => clearInterval(handle);\n  }, [setPassedTime]);\n\n  const stopTimer = React.useCallback(() => {\n    clearInterval(intervalHandle);\n    setIntervalHandle(undefined);\n  }, [intervalHandle, setIntervalHandle]);\n\n  return [passedTime, setPassedTime, stopTimer];\n}\n","import React from 'react';\n\nimport Game from './components/Game';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Game width={10} height={10} bombs={10} />\n    </div>\n  );\n};\n\nexport default App;\n","import { createGlobalStyle } from 'styled-components';\n\nimport { styleReset } from 'react95';\n\n/* Original Windows95 font (optional) */\nimport ms_sans_serif from 'react95/dist/fonts/ms_sans_serif.woff2';\nimport ms_sans_serif_bold from 'react95/dist/fonts/ms_sans_serif_bold.woff2';\n\nexport default createGlobalStyle`\n  @font-face {\n    font-family: 'ms_sans_serif';\n    src: url('${ms_sans_serif}') format('woff2');\n    font-weight: 400;\n    font-style: normal\n  }\n  @font-face {\n    font-family: 'ms_sans_serif';\n    src: url('${ms_sans_serif_bold}') format('woff2');\n    font-weight: bold;\n    font-style: normal\n  }\n  body {\n    font-family: 'ms_sans_serif';\n    background-color: teal;\n  }\n  ${styleReset}\n`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    void import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { ThemeProvider } from 'styled-components';\n\n/* Pick a theme of your choice */\nimport original from 'react95/dist/themes/original';\n\nimport App from './App';\nimport GlobalStyles from './index.styles';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n    <ThemeProvider theme={original}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}